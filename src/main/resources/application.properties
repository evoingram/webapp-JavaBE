server.port=${PORT:2019}
# server.servlet.context-path=/apis
# Which db to run
# local.run.db=H2
local.run.db=POSTGRESQL
# Environment Variables Needed for PostgreSQL database
# server.address=System.getenv("DATABASE_URL")
spring.datasource.url="jdbc:postgresql://" + \
  System.getenv("MYDBUSER") + ":" + \
  System.getenv("MYDBPASSWORD") + "@" + \
  System.getenv("MYDBHOST") + ":5432/" + \
  System.getenv("MYDBNAME")

OAUTHCLIENTID=System.getenv("OAUTHCLIENTID")
OAUTHCLIENTSECRET=System.getenv("OAUTHCLIENTSECRET")
# DATABASE_URL=System.getenv("DATABASE_URL")
# System.getenv("MYDBNAME")
# System.getenv("MYDBHOST")
# System.getenv("MYDBUSER")
# System.getenv("MYDBPASSWORD")
# Environment Variables Needed for OAuth2 Authentication Server
# System.getenv("OAUTHCLIENTID")
# System.getenv("OAUTHCLIENTSECRET")
# Find heroku info
# heroku config -a jrmmba-oauthmin
# System.getenv("DATABASE_URL")
# postgres://username:password@url:PORT/dbname
# Begin h2 configuration
spring.h2.console.enabled=true
spring.h2.console.path=/h2-console
spring.h2.console.settings.web-allow-others=true
# End h2 configuration
# What do with the schema
# drop n create table again, good for testing
spring.jpa.hibernate.ddl-auto=create
spring.datasource.initialization-mode=always
# Good for production!
# spring.jpa.hibernate.ddl-auto=update
# spring.datasource.initialization-mode=never
# Should we use createBlob from java.sql.connection. PostgreSQL requires it to be true.
spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true
# Feature that determines what happens when no accessors are found for a type
# (and there are no annotations to indicate it is meant to be serialized).
spring.jackson.serialization.fail-on-empty-beans=false
# Turns off Spring Boot automatic exception handling
server.error.whitelabel.enabled=false
# needed for actuators to work
management.endpoints.web.exposure.include=*
management.endpoint.health.show-details=always
management.endpoint.shutdown.enabled=true
# Shows the generated and custom SQL but does hurt performance and the logs get full fast
# spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true
# keeps a transaction inside of the same entity manager
# This property register an EntityManager to the current thread,
# so you will have the same EntityManager until the web request is finished.
spring.jpa.open-in-view=true
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQL82Dialect